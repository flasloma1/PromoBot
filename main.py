import logging
import re
import asyncio
import httpx
import os
from datetime import datetime, timezone
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CONFIG = {
    "api_id": int(os.getenv("TELEGRAM_API_ID")),
    "api_hash": os.getenv("TELEGRAM_API_HASH"),
    "string_session": os.getenv("TELEGRAM_SESSION"),
    "target_chat": os.getenv("TARGET_CHAT"),
    "bot_token": "8125104552:AAFubdRCSgpCizdb2A78-jsJhQJAVwUs6wA",  # –ù–û–í–´–ô –¢–û–ö–ï–ù
    "bot_target_chat": os.getenv("BOT_TARGET_CHAT"),
    "codes_file": "promo_codes.txt"
}

def extract_promo(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text = text.upper()
    matches = re.findall(r'[A-F0-9*]{12,}', text)
    return [match.replace('*', '0')[:12] for match in matches]

async def send_bot_message(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{CONFIG['bot_token']}/sendMessage"
    payload = {
        "chat_id": CONFIG["bot_target_chat"],
        "text": text,
        "parse_mode": "HTML"
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json=payload)
            if response.status_code == 200:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            logger.error(f"üö´ –°–±–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
    client = TelegramClient(
        StringSession(CONFIG["string_session"]),
        CONFIG["api_id"],
        CONFIG["api_hash"]
    )
    
    await client.start()
    logger.info("üîì –ö–ª–∏–µ–Ω—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    target_chat = None
    async for dialog in client.iter_dialogs():
        if dialog.name == CONFIG["target_chat"]:
            target_chat = dialog.entity
            break

    if not target_chat:
        logger.error(f"‚ùå –ß–∞—Ç '{CONFIG['target_chat']}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    seen_codes = set()
    if os.path.exists(CONFIG["codes_file"]):
        with open(CONFIG["codes_file"], "r") as f:
            seen_codes = {line.split(",")[0] for line in f}

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(chats=target_chat))
    async def message_handler(event):
        text = event.message.text
        if not text:
            return

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        codes = extract_promo(text)
        if not codes:
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        new_codes = [code for code in codes if code not in seen_codes]
        if not new_codes:
            logger.info("üîÑ –ù–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        for code in new_codes:
            seen_codes.add(code)
            timestamp = datetime.now(timezone.utc).isoformat()
            
            # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            with open(CONFIG["codes_file"], "a") as f:
                f.write(f"{code},{timestamp}\n")
            
            logger.info(f"üéÅ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {code}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = (
                f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!\n\n"
                f"<b>–ö–æ–¥:</b> <code>{code}</code>\n"
                f"<b>–ß–∞—Ç:</b> {CONFIG['target_chat']}\n"
                f"<b>–í—Ä–µ–º—è:</b> {timestamp.split('T')[1][:8]} UTC"
            )
            await send_bot_message(message)

    logger.info(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {CONFIG['target_chat']}")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())

import logging
import re
import asyncio
import os
import sys
from datetime import datetime, timezone
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID", 0))
        self.api_hash = os.getenv("TELEGRAM_API_HASH", "")
        self.session = os.getenv("TELEGRAM_SESSION", "")
        self.target_chat = os.getenv("TARGET_CHAT", "")
        self.codes_file = "promo_codes.txt"
        
        # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤–∞—à –∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞)
        self.notify_user_ids = [817155267, 6344353030]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([self.api_id, self.api_hash, self.session, self.target_chat]):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            sys.exit(1)

CONFIG = Config()

def extract_promo(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text = text.upper()
    matches = re.findall(r'[A-F0-9*]{12,}', text)
    return [match.replace('*', '0')[:12] for match in matches]

async def send_user_notification(client, user_id: int, code: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üéâ –ü–†–û–ú–ò–ö –ß–ï–•–õ–ï–û –ñ–ï –ï–°–¢–¨ –Ø –ï–ì–û –í–°–ï –¶–ï–õ–û–í–ê–õ, —Å–ø–∞—Å–∏–±–æ –≤–ª–∞–¥—É –∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:\n\n"
            f"üî• –ö–æ–¥: `{code}`\n"
            f"üí¨ –ß–∞—Ç: {CONFIG.target_chat}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')} UTC"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client.send_message(user_id, message)
        logger.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
    client = TelegramClient(
        StringSession(CONFIG.session),
        CONFIG.api_id,
        CONFIG.api_hash
    )
    
    await client.start()
    logger.info("üîì –ö–ª–∏–µ–Ω—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    logger.info(f"üë§ –í–∞—à ID: {(await client.get_me()).id}")

    # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    target_entity = None
    async for dialog in client.iter_dialogs():
        if dialog.name == CONFIG.target_chat:
            target_entity = dialog.entity
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
            break

    if not target_entity:
        logger.error(f"‚ùå –ß–∞—Ç '{CONFIG.target_chat}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await client.disconnect()
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    seen_codes = set()
    if os.path.exists(CONFIG.codes_file):
        try:
            with open(CONFIG.codes_file, "r") as f:
                seen_codes = {line.split(",")[0].strip() for line in f}
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(seen_codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(chats=target_entity))
    async def message_handler(event):
        text = event.message.text or ""
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        codes = extract_promo(text)
        if not codes:
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        new_codes = [code for code in codes if code not in seen_codes]
        if not new_codes:
            logger.info("üîÑ –ù–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        for code in new_codes:
            seen_codes.add(code)
            timestamp = datetime.now(timezone.utc).isoformat()
            
            # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            try:
                with open(CONFIG.codes_file, "a") as f:
                    f.write(f"{code},{timestamp}\n")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
            
            logger.info(f"üéâ –ü–†–û–ú–ò–ö –ß–ï–•–õ–ï–û –ñ–ï –ï–°–¢–¨ –Ø –ï–ì–û –í–°–ï –¶–ï–õ–û–í–ê–õ, —Å–ø–∞—Å–∏–±–æ –≤–ª–∞–¥—É –∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {code}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in CONFIG.notify_user_ids:
                await send_user_notification(client, user_id, code)

    logger.info(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {CONFIG.target_chat}")
    logger.info(f"üë• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è: {CONFIG.notify_user_ids}")
    await client.run_until_disconnected()

# üëá –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã app.py –º–æ–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë
async def run_bot():
    await main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

import logging
import re
import asyncio
import httpx
import os
import sys
from datetime import datetime, timezone
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID", 0))
        self.api_hash = os.getenv("TELEGRAM_API_HASH", "")
        self.session = os.getenv("TELEGRAM_SESSION", "")
        self.target_chat = os.getenv("TARGET_CHAT", "")
        self.bot_token = "8125104552:AAFubdRCSgpCizdb2A78-jsJhQJAVwUs6wA"
        self.bot_chat_id = os.getenv("BOT_CHAT_ID", "")
        self.codes_file = "promo_codes.txt"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([self.api_id, self.api_hash, self.session, self.target_chat, self.bot_chat_id]):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            sys.exit(1)

CONFIG = Config()

def extract_promo(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text = text.upper()
    matches = re.findall(r'[A-F0-9*]{12,}', text)
    return [match.replace('*', '0')[:12] for match in matches]

async def send_bot_message(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{CONFIG.bot_token}/sendMessage"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "chat_id": CONFIG.bot_chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    async with httpx.AsyncClient(timeout=10.0) as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.response.status_code}: {e.response.text}")
        except Exception as e:
            logger.error(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
    client = TelegramClient(
        StringSession(CONFIG.session),
        CONFIG.api_id,
        CONFIG.api_hash
    )
    
    await client.start()
    logger.info("üîì –ö–ª–∏–µ–Ω—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    # –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
    target_entity = None
    async for dialog in client.iter_dialogs():
        if dialog.name == CONFIG.target_chat:
            target_entity = dialog.entity
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç: {dialog.name} (ID: {dialog.id})")
            break

    if not target_entity:
        logger.error(f"‚ùå –ß–∞—Ç '{CONFIG.target_chat}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await client.disconnect()
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    seen_codes = set()
    if os.path.exists(CONFIG.codes_file):
        try:
            with open(CONFIG.codes_file, "r") as f:
                seen_codes = {line.split(",")[0].strip() for line in f}
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(seen_codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(chats=target_entity))
    async def message_handler(event):
        text = event.message.text or ""
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        codes = extract_promo(text)
        if not codes:
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        new_codes = [code for code in codes if code not in seen_codes]
        if not new_codes:
            logger.info("üîÑ –ù–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        for code in new_codes:
            seen_codes.add(code)
            timestamp = datetime.now(timezone.utc).isoformat()
            
            # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            try:
                with open(CONFIG.codes_file, "a") as f:
                    f.write(f"{code},{timestamp}\n")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
            
            logger.info(f"üéÅ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {code}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{code}</code>"
            await send_bot_message(message)

    logger.info(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {CONFIG.target_chat}")
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
